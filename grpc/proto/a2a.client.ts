// @generated by protobuf-ts 2.11.1 with parameter server_grpc1
// @generated from protobuf file "a2a.proto" (package "a2a.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { A2AService } from "./a2a";
import type { Empty } from "./google/protobuf/empty";
import type { DeleteTaskPushNotificationConfigRequest } from "./a2a";
import type { AgentCard } from "./a2a";
import type { GetAgentCardRequest } from "./a2a";
import type { ListTaskPushNotificationConfigResponse } from "./a2a";
import type { ListTaskPushNotificationConfigRequest } from "./a2a";
import type { GetTaskPushNotificationConfigRequest } from "./a2a";
import type { TaskPushNotificationConfig } from "./a2a";
import type { CreateTaskPushNotificationConfigRequest } from "./a2a";
import type { TaskSubscriptionRequest } from "./a2a";
import type { CancelTaskRequest } from "./a2a";
import type { Task } from "./a2a";
import type { GetTaskRequest } from "./a2a";
import type { StreamResponse } from "./a2a";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SendMessageResponse } from "./a2a";
import type { SendMessageRequest } from "./a2a";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * A2AService defines the gRPC version of the A2A protocol. This has a slightly
 * different shape than the JSONRPC version to better conform to AIP-127,
 * where appropriate. The nouns are AgentCard, Message, Task and
 * TaskPushNotificationConfig.
 * - Messages are not a standard resource so there is no get/delete/update/list
 *   interface, only a send and stream custom methods.
 * - Tasks have a get interface and custom cancel and subscribe methods.
 * - TaskPushNotificationConfig are a resource whose parent is a task.
 *   They have get, list and create methods.
 * - AgentCard is a static resource with only a get method.
 * fields are not present as they don't comply with AIP rules, and the
 * optional history_length on the get task method is not present as it also
 * violates AIP-127 and AIP-131.
 *
 * @generated from protobuf service a2a.v1.A2AService
 */
export interface IA2AServiceClient {
    /**
     * Send a message to the agent. This is a blocking call that will return the
     * task once it is completed, or a LRO if requested.
     *
     * @generated from protobuf rpc: SendMessage
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * SendStreamingMessage is a streaming call that will return a stream of
     * task update events until the Task is in an interrupted or terminal state.
     *
     * @generated from protobuf rpc: SendStreamingMessage
     */
    sendStreamingMessage(input: SendMessageRequest, options?: RpcOptions): ServerStreamingCall<SendMessageRequest, StreamResponse>;
    /**
     * Get the current state of a task from the agent.
     *
     * @generated from protobuf rpc: GetTask
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task>;
    /**
     * Cancel a task from the agent. If supported one should expect no
     * more task updates for the task.
     *
     * @generated from protobuf rpc: CancelTask
     */
    cancelTask(input: CancelTaskRequest, options?: RpcOptions): UnaryCall<CancelTaskRequest, Task>;
    /**
     * TaskSubscription is a streaming call that will return a stream of task
     * update events. This attaches the stream to an existing in process task.
     * If the task is complete the stream will return the completed task (like
     * GetTask) and close the stream.
     *
     * @generated from protobuf rpc: TaskSubscription
     */
    taskSubscription(input: TaskSubscriptionRequest, options?: RpcOptions): ServerStreamingCall<TaskSubscriptionRequest, StreamResponse>;
    /**
     * Set a push notification config for a task.
     *
     * @generated from protobuf rpc: CreateTaskPushNotificationConfig
     */
    createTaskPushNotificationConfig(input: CreateTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<CreateTaskPushNotificationConfigRequest, TaskPushNotificationConfig>;
    /**
     * Get a push notification config for a task.
     *
     * @generated from protobuf rpc: GetTaskPushNotificationConfig
     */
    getTaskPushNotificationConfig(input: GetTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<GetTaskPushNotificationConfigRequest, TaskPushNotificationConfig>;
    /**
     * Get a list of push notifications configured for a task.
     *
     * @generated from protobuf rpc: ListTaskPushNotificationConfig
     */
    listTaskPushNotificationConfig(input: ListTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<ListTaskPushNotificationConfigRequest, ListTaskPushNotificationConfigResponse>;
    /**
     * GetAgentCard returns the agent card for the agent.
     *
     * @generated from protobuf rpc: GetAgentCard
     */
    getAgentCard(input: GetAgentCardRequest, options?: RpcOptions): UnaryCall<GetAgentCardRequest, AgentCard>;
    /**
     * Delete a push notification config for a task.
     *
     * @generated from protobuf rpc: DeleteTaskPushNotificationConfig
     */
    deleteTaskPushNotificationConfig(input: DeleteTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<DeleteTaskPushNotificationConfigRequest, Empty>;
}
/**
 * A2AService defines the gRPC version of the A2A protocol. This has a slightly
 * different shape than the JSONRPC version to better conform to AIP-127,
 * where appropriate. The nouns are AgentCard, Message, Task and
 * TaskPushNotificationConfig.
 * - Messages are not a standard resource so there is no get/delete/update/list
 *   interface, only a send and stream custom methods.
 * - Tasks have a get interface and custom cancel and subscribe methods.
 * - TaskPushNotificationConfig are a resource whose parent is a task.
 *   They have get, list and create methods.
 * - AgentCard is a static resource with only a get method.
 * fields are not present as they don't comply with AIP rules, and the
 * optional history_length on the get task method is not present as it also
 * violates AIP-127 and AIP-131.
 *
 * @generated from protobuf service a2a.v1.A2AService
 */
export class A2AServiceClient implements IA2AServiceClient, ServiceInfo {
    typeName = A2AService.typeName;
    methods = A2AService.methods;
    options = A2AService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Send a message to the agent. This is a blocking call that will return the
     * task once it is completed, or a LRO if requested.
     *
     * @generated from protobuf rpc: SendMessage
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SendStreamingMessage is a streaming call that will return a stream of
     * task update events until the Task is in an interrupted or terminal state.
     *
     * @generated from protobuf rpc: SendStreamingMessage
     */
    sendStreamingMessage(input: SendMessageRequest, options?: RpcOptions): ServerStreamingCall<SendMessageRequest, StreamResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, StreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Get the current state of a task from the agent.
     *
     * @generated from protobuf rpc: GetTask
     */
    getTask(input: GetTaskRequest, options?: RpcOptions): UnaryCall<GetTaskRequest, Task> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * Cancel a task from the agent. If supported one should expect no
     * more task updates for the task.
     *
     * @generated from protobuf rpc: CancelTask
     */
    cancelTask(input: CancelTaskRequest, options?: RpcOptions): UnaryCall<CancelTaskRequest, Task> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CancelTaskRequest, Task>("unary", this._transport, method, opt, input);
    }
    /**
     * TaskSubscription is a streaming call that will return a stream of task
     * update events. This attaches the stream to an existing in process task.
     * If the task is complete the stream will return the completed task (like
     * GetTask) and close the stream.
     *
     * @generated from protobuf rpc: TaskSubscription
     */
    taskSubscription(input: TaskSubscriptionRequest, options?: RpcOptions): ServerStreamingCall<TaskSubscriptionRequest, StreamResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<TaskSubscriptionRequest, StreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Set a push notification config for a task.
     *
     * @generated from protobuf rpc: CreateTaskPushNotificationConfig
     */
    createTaskPushNotificationConfig(input: CreateTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<CreateTaskPushNotificationConfigRequest, TaskPushNotificationConfig> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTaskPushNotificationConfigRequest, TaskPushNotificationConfig>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a push notification config for a task.
     *
     * @generated from protobuf rpc: GetTaskPushNotificationConfig
     */
    getTaskPushNotificationConfig(input: GetTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<GetTaskPushNotificationConfigRequest, TaskPushNotificationConfig> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTaskPushNotificationConfigRequest, TaskPushNotificationConfig>("unary", this._transport, method, opt, input);
    }
    /**
     * Get a list of push notifications configured for a task.
     *
     * @generated from protobuf rpc: ListTaskPushNotificationConfig
     */
    listTaskPushNotificationConfig(input: ListTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<ListTaskPushNotificationConfigRequest, ListTaskPushNotificationConfigResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTaskPushNotificationConfigRequest, ListTaskPushNotificationConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetAgentCard returns the agent card for the agent.
     *
     * @generated from protobuf rpc: GetAgentCard
     */
    getAgentCard(input: GetAgentCardRequest, options?: RpcOptions): UnaryCall<GetAgentCardRequest, AgentCard> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAgentCardRequest, AgentCard>("unary", this._transport, method, opt, input);
    }
    /**
     * Delete a push notification config for a task.
     *
     * @generated from protobuf rpc: DeleteTaskPushNotificationConfig
     */
    deleteTaskPushNotificationConfig(input: DeleteTaskPushNotificationConfigRequest, options?: RpcOptions): UnaryCall<DeleteTaskPushNotificationConfigRequest, Empty> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTaskPushNotificationConfigRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
