// @generated by protobuf-ts 2.11.1 with parameter server_grpc1
// @generated from protobuf file "agent_executor.proto" (package "agent_executor_proxy", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AgentExecutor } from "./agent_executor";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamResponse } from "./a2a";
import type { AgentExecutorRequest } from "./agent_executor";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service agent_executor_proxy.AgentExecutor
 */
export interface IAgentExecutorClient {
    /**
     * @generated from protobuf rpc: Execute
     */
    execute(input: AgentExecutorRequest, options?: RpcOptions): ServerStreamingCall<AgentExecutorRequest, StreamResponse>;
}
/**
 * @generated from protobuf service agent_executor_proxy.AgentExecutor
 */
export class AgentExecutorClient implements IAgentExecutorClient, ServiceInfo {
    typeName = AgentExecutor.typeName;
    methods = AgentExecutor.methods;
    options = AgentExecutor.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Execute
     */
    execute(input: AgentExecutorRequest, options?: RpcOptions): ServerStreamingCall<AgentExecutorRequest, StreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<AgentExecutorRequest, StreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
