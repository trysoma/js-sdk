// @generated by protobuf-ts 2.11.1 with parameter server_grpc1
// @generated from protobuf file "agent_executor.proto" (package "agent_executor_proxy", syntax proto3)
// tslint:disable
import { StreamResponse } from "./a2a";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Task } from "./a2a";
import { SendMessageRequest } from "./a2a";
/**
 * @generated from protobuf message agent_executor_proxy.AgentExecutorRequest
 */
export interface AgentExecutorRequest {
    /**
     * @generated from protobuf field: a2a.v1.SendMessageRequest request = 1
     */
    request?: SendMessageRequest;
    /**
     * @generated from protobuf field: a2a.v1.Task task = 2
     */
    task?: Task;
    /**
     * @generated from protobuf field: repeated a2a.v1.Task reference_tasks = 3
     */
    referenceTasks: Task[];
    /**
     * @generated from protobuf field: string task_id = 4
     */
    taskId: string;
    /**
     * @generated from protobuf field: string context_id = 5
     */
    contextId: string;
}
/**
 * @generated from protobuf message agent_executor_proxy.AgentExecutorStreamResponse
 */
export interface AgentExecutorStreamResponse {
}
/**
 * @generated from protobuf message agent_executor_proxy.CancelTaskRequest
 */
export interface CancelTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1
     */
    taskId: string;
}
/**
 * @generated from protobuf message agent_executor_proxy.CancelTaskResponse
 */
export interface CancelTaskResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class AgentExecutorRequest$Type extends MessageType<AgentExecutorRequest> {
    constructor() {
        super("agent_executor_proxy.AgentExecutorRequest", [
            { no: 1, name: "request", kind: "message", T: () => SendMessageRequest },
            { no: 2, name: "task", kind: "message", T: () => Task },
            { no: 3, name: "reference_tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Task },
            { no: 4, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "context_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AgentExecutorRequest>): AgentExecutorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.referenceTasks = [];
        message.taskId = "";
        message.contextId = "";
        if (value !== undefined)
            reflectionMergePartial<AgentExecutorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentExecutorRequest): AgentExecutorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* a2a.v1.SendMessageRequest request */ 1:
                    message.request = SendMessageRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* a2a.v1.Task task */ 2:
                    message.task = Task.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                case /* repeated a2a.v1.Task reference_tasks */ 3:
                    message.referenceTasks.push(Task.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string task_id */ 4:
                    message.taskId = reader.string();
                    break;
                case /* string context_id */ 5:
                    message.contextId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentExecutorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* a2a.v1.SendMessageRequest request = 1; */
        if (message.request)
            SendMessageRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* a2a.v1.Task task = 2; */
        if (message.task)
            Task.internalBinaryWrite(message.task, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated a2a.v1.Task reference_tasks = 3; */
        for (let i = 0; i < message.referenceTasks.length; i++)
            Task.internalBinaryWrite(message.referenceTasks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string task_id = 4; */
        if (message.taskId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.taskId);
        /* string context_id = 5; */
        if (message.contextId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.contextId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent_executor_proxy.AgentExecutorRequest
 */
export const AgentExecutorRequest = new AgentExecutorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AgentExecutorStreamResponse$Type extends MessageType<AgentExecutorStreamResponse> {
    constructor() {
        super("agent_executor_proxy.AgentExecutorStreamResponse", []);
    }
    create(value?: PartialMessage<AgentExecutorStreamResponse>): AgentExecutorStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AgentExecutorStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AgentExecutorStreamResponse): AgentExecutorStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AgentExecutorStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent_executor_proxy.AgentExecutorStreamResponse
 */
export const AgentExecutorStreamResponse = new AgentExecutorStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelTaskRequest$Type extends MessageType<CancelTaskRequest> {
    constructor() {
        super("agent_executor_proxy.CancelTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CancelTaskRequest>): CancelTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        if (value !== undefined)
            reflectionMergePartial<CancelTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelTaskRequest): CancelTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent_executor_proxy.CancelTaskRequest
 */
export const CancelTaskRequest = new CancelTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelTaskResponse$Type extends MessageType<CancelTaskResponse> {
    constructor() {
        super("agent_executor_proxy.CancelTaskResponse", []);
    }
    create(value?: PartialMessage<CancelTaskResponse>): CancelTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CancelTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelTaskResponse): CancelTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message agent_executor_proxy.CancelTaskResponse
 */
export const CancelTaskResponse = new CancelTaskResponse$Type();
/**
 * @generated ServiceType for protobuf service agent_executor_proxy.AgentExecutor
 */
export const AgentExecutor = new ServiceType("agent_executor_proxy.AgentExecutor", [
    { name: "Execute", serverStreaming: true, options: {}, I: AgentExecutorRequest, O: StreamResponse }
]);
